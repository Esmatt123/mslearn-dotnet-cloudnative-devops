trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '2ab4f159-c1a5-418d-84c4-9a3536f78cff'
  imageRepository: 'productservice'
  containerRegistry: 'acseshop468748905.azurecr.io'
  dockerfilePath: 'DockerfileProducts.acr'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acseshop4687489059123-auth'

  # Agent name
  selfHostedAgentName: 'LAPTOP-6NHIG1K8'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: 'Default'   # Default or the name of your agent pool
      demands:
        - agent.name -equals $(selfHostedAgentName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      name: 'Default'  # Default or the name of your agent pool
      demands:
        - agent.name -equals $(selfHostedAgentName)
    environment: 'Esmatt123mslearndotnetcloudnativedevops.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
